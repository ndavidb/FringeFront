/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Fringe API
 * API for Fringe application
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BatchCreatePerformanceDto,
  CreatePerformanceDto,
  CreateShowDto,
  CreateTicketDTO,
  CreateTicketTypeDto,
  CreateVenueDto,
  ForgotPasswordDto,
  GetApiCloudShowsGetShowsByPostalCodesParams,
  LoginDto,
  PostApiFileUploadVenueBody,
  ProblemDetails,
  RefreshTokenDto,
  RegisterDto,
  ResetPasswordDto,
  UpdatePerformanceDto,
  UpdateShowDto,
  UpdateTicketDto,
  UpdateTicketTypeDto,
  UserQueryDto
} from '@/types/api';

import { customInstance } from './mutator/custom-instance';




export const postAuthLogin = (
    loginDto: LoginDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginDto, signal
    },
      );
    }
  


export const getPostAuthLoginMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginDto}, TContext> => {
    
const mutationKey = ['postAuthLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: LoginDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = LoginDto
    export type PostAuthLoginMutationError = ProblemDetails

    export const usePostAuthLogin = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: LoginDto},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postAuthRegister = (
    registerDto: RegisterDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerDto, signal
    },
      );
    }
  


export const getPostAuthRegisterMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: RegisterDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: RegisterDto}, TContext> => {
    
const mutationKey = ['postAuthRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRegister>>, {data: RegisterDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRegister>>>
    export type PostAuthRegisterMutationBody = RegisterDto
    export type PostAuthRegisterMutationError = ProblemDetails

    export const usePostAuthRegister = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRegister>>, TError,{data: RegisterDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRegister>>,
        TError,
        {data: RegisterDto},
        TContext
      > => {

      const mutationOptions = getPostAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postAuthRefreshToken = (
    refreshTokenDto: RefreshTokenDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/refresh-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenDto, signal
    },
      );
    }
  


export const getPostAuthRefreshTokenMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefreshToken>>, TError,{data: RefreshTokenDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRefreshToken>>, TError,{data: RefreshTokenDto}, TContext> => {
    
const mutationKey = ['postAuthRefreshToken'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRefreshToken>>, {data: RefreshTokenDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRefreshToken(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRefreshToken>>>
    export type PostAuthRefreshTokenMutationBody = RefreshTokenDto
    export type PostAuthRefreshTokenMutationError = ProblemDetails

    export const usePostAuthRefreshToken = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefreshToken>>, TError,{data: RefreshTokenDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRefreshToken>>,
        TError,
        {data: RefreshTokenDto},
        TContext
      > => {

      const mutationOptions = getPostAuthRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postAuthForgotPassword = (
    forgotPasswordDto: ForgotPasswordDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/forgot-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: forgotPasswordDto, signal
    },
      );
    }
  


export const getPostAuthForgotPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: ForgotPasswordDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: ForgotPasswordDto}, TContext> => {
    
const mutationKey = ['postAuthForgotPassword'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthForgotPassword>>, {data: ForgotPasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthForgotPassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthForgotPassword>>>
    export type PostAuthForgotPasswordMutationBody = ForgotPasswordDto
    export type PostAuthForgotPasswordMutationError = unknown

    export const usePostAuthForgotPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: ForgotPasswordDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthForgotPassword>>,
        TError,
        {data: ForgotPasswordDto},
        TContext
      > => {

      const mutationOptions = getPostAuthForgotPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postAuthResetPassword = (
    resetPasswordDto: ResetPasswordDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/reset-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordDto, signal
    },
      );
    }
  


export const getPostAuthResetPasswordMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: ResetPasswordDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: ResetPasswordDto}, TContext> => {
    
const mutationKey = ['postAuthResetPassword'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthResetPassword>>, {data: ResetPasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthResetPassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthResetPassword>>>
    export type PostAuthResetPasswordMutationBody = ResetPasswordDto
    export type PostAuthResetPasswordMutationError = ProblemDetails

    export const usePostAuthResetPassword = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: ResetPasswordDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthResetPassword>>,
        TError,
        {data: ResetPasswordDto},
        TContext
      > => {

      const mutationOptions = getPostAuthResetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postAuthCreateManager = (
    registerDto: RegisterDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/create-manager`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerDto, signal
    },
      );
    }
  


export const getPostAuthCreateManagerMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthCreateManager>>, TError,{data: RegisterDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthCreateManager>>, TError,{data: RegisterDto}, TContext> => {
    
const mutationKey = ['postAuthCreateManager'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthCreateManager>>, {data: RegisterDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthCreateManager(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthCreateManagerMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthCreateManager>>>
    export type PostAuthCreateManagerMutationBody = RegisterDto
    export type PostAuthCreateManagerMutationError = ProblemDetails

    export const usePostAuthCreateManager = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthCreateManager>>, TError,{data: RegisterDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthCreateManager>>,
        TError,
        {data: RegisterDto},
        TContext
      > => {

      const mutationOptions = getPostAuthCreateManagerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAuthUsersRole = (
    role: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/Auth/users/${role}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAuthUsersRoleQueryKey = (role: string,) => {
    return [`/Auth/users/${role}`] as const;
    }

    
export const getGetAuthUsersRoleQueryOptions = <TData = Awaited<ReturnType<typeof getAuthUsersRole>>, TError = unknown>(role: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthUsersRoleQueryKey(role);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthUsersRole>>> = ({ signal }) => getAuthUsersRole(role, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(role), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAuthUsersRoleQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthUsersRole>>>
export type GetAuthUsersRoleQueryError = unknown


export function useGetAuthUsersRole<TData = Awaited<ReturnType<typeof getAuthUsersRole>>, TError = unknown>(
 role: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthUsersRole>>,
          TError,
          Awaited<ReturnType<typeof getAuthUsersRole>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthUsersRole<TData = Awaited<ReturnType<typeof getAuthUsersRole>>, TError = unknown>(
 role: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthUsersRole>>,
          TError,
          Awaited<ReturnType<typeof getAuthUsersRole>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthUsersRole<TData = Awaited<ReturnType<typeof getAuthUsersRole>>, TError = unknown>(
 role: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAuthUsersRole<TData = Awaited<ReturnType<typeof getAuthUsersRole>>, TError = unknown>(
 role: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthUsersRole>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAuthUsersRoleQueryOptions(role,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiCloudShowsCloudGetAllShows = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/CloudShows/Cloud Get All Shows`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiCloudShowsCloudGetAllShowsQueryKey = () => {
    return [`/api/CloudShows/Cloud Get All Shows`] as const;
    }

    
export const getGetApiCloudShowsCloudGetAllShowsQueryOptions = <TData = Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCloudShowsCloudGetAllShowsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>> = ({ signal }) => getApiCloudShowsCloudGetAllShows(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCloudShowsCloudGetAllShowsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>>
export type GetApiCloudShowsCloudGetAllShowsQueryError = unknown


export function useGetApiCloudShowsCloudGetAllShows<TData = Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>,
          TError,
          Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCloudShowsCloudGetAllShows<TData = Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>,
          TError,
          Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCloudShowsCloudGetAllShows<TData = Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiCloudShowsCloudGetAllShows<TData = Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsCloudGetAllShows>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCloudShowsCloudGetAllShowsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiCloudShowsGetShowsByPostalCodes = (
    params?: GetApiCloudShowsGetShowsByPostalCodesParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/CloudShows/GetShowsByPostalCodes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiCloudShowsGetShowsByPostalCodesQueryKey = (params?: GetApiCloudShowsGetShowsByPostalCodesParams,) => {
    return [`/api/CloudShows/GetShowsByPostalCodes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiCloudShowsGetShowsByPostalCodesQueryOptions = <TData = Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>, TError = unknown>(params?: GetApiCloudShowsGetShowsByPostalCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCloudShowsGetShowsByPostalCodesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>> = ({ signal }) => getApiCloudShowsGetShowsByPostalCodes(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCloudShowsGetShowsByPostalCodesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>>
export type GetApiCloudShowsGetShowsByPostalCodesQueryError = unknown


export function useGetApiCloudShowsGetShowsByPostalCodes<TData = Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>, TError = unknown>(
 params: undefined |  GetApiCloudShowsGetShowsByPostalCodesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>,
          TError,
          Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCloudShowsGetShowsByPostalCodes<TData = Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>, TError = unknown>(
 params?: GetApiCloudShowsGetShowsByPostalCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>,
          TError,
          Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCloudShowsGetShowsByPostalCodes<TData = Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>, TError = unknown>(
 params?: GetApiCloudShowsGetShowsByPostalCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiCloudShowsGetShowsByPostalCodes<TData = Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>, TError = unknown>(
 params?: GetApiCloudShowsGetShowsByPostalCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCloudShowsGetShowsByPostalCodes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCloudShowsGetShowsByPostalCodesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiExplore = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Explore`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiExploreQueryKey = () => {
    return [`/api/Explore`] as const;
    }

    
export const getGetApiExploreQueryOptions = <TData = Awaited<ReturnType<typeof getApiExplore>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiExplore>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiExploreQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiExplore>>> = ({ signal }) => getApiExplore(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiExplore>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiExploreQueryResult = NonNullable<Awaited<ReturnType<typeof getApiExplore>>>
export type GetApiExploreQueryError = unknown


export function useGetApiExplore<TData = Awaited<ReturnType<typeof getApiExplore>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiExplore>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiExplore>>,
          TError,
          Awaited<ReturnType<typeof getApiExplore>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiExplore<TData = Awaited<ReturnType<typeof getApiExplore>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiExplore>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiExplore>>,
          TError,
          Awaited<ReturnType<typeof getApiExplore>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiExplore<TData = Awaited<ReturnType<typeof getApiExplore>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiExplore>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiExplore<TData = Awaited<ReturnType<typeof getApiExplore>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiExplore>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiExploreQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiFileUploadVenue = (
    postApiFileUploadVenueBody: PostApiFileUploadVenueBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiFileUploadVenueBody.file !== undefined) {
 formData.append('file', postApiFileUploadVenueBody.file)
 }

      return customInstance<void>(
      {url: `/api/FileUpload/venue`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getPostApiFileUploadVenueMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFileUploadVenue>>, TError,{data: PostApiFileUploadVenueBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiFileUploadVenue>>, TError,{data: PostApiFileUploadVenueBody}, TContext> => {
    
const mutationKey = ['postApiFileUploadVenue'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiFileUploadVenue>>, {data: PostApiFileUploadVenueBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiFileUploadVenue(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiFileUploadVenueMutationResult = NonNullable<Awaited<ReturnType<typeof postApiFileUploadVenue>>>
    export type PostApiFileUploadVenueMutationBody = PostApiFileUploadVenueBody
    export type PostApiFileUploadVenueMutationError = ProblemDetails

    export const usePostApiFileUploadVenue = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiFileUploadVenue>>, TError,{data: PostApiFileUploadVenueBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiFileUploadVenue>>,
        TError,
        {data: PostApiFileUploadVenueBody},
        TContext
      > => {

      const mutationOptions = getPostApiFileUploadVenueMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiLocations = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Locations`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiLocationsQueryKey = () => {
    return [`/api/Locations`] as const;
    }

    
export const getGetApiLocationsQueryOptions = <TData = Awaited<ReturnType<typeof getApiLocations>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLocations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiLocationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLocations>>> = ({ signal }) => getApiLocations(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiLocations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiLocations>>>
export type GetApiLocationsQueryError = unknown


export function useGetApiLocations<TData = Awaited<ReturnType<typeof getApiLocations>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLocations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiLocations>>,
          TError,
          Awaited<ReturnType<typeof getApiLocations>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiLocations<TData = Awaited<ReturnType<typeof getApiLocations>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLocations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiLocations>>,
          TError,
          Awaited<ReturnType<typeof getApiLocations>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiLocations<TData = Awaited<ReturnType<typeof getApiLocations>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLocations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiLocations<TData = Awaited<ReturnType<typeof getApiLocations>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLocations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiLocationsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





export const getApiLocationsId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Locations/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiLocationsIdQueryKey = (id: number,) => {
    return [`/api/Locations/${id}`] as const;
    }

    
export const getGetApiLocationsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiLocationsId>>, TError = ProblemDetails>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLocationsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiLocationsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLocationsId>>> = ({ signal }) => getApiLocationsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiLocationsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiLocationsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiLocationsId>>>
export type GetApiLocationsIdQueryError = ProblemDetails


export function useGetApiLocationsId<TData = Awaited<ReturnType<typeof getApiLocationsId>>, TError = ProblemDetails>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLocationsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiLocationsId>>,
          TError,
          Awaited<ReturnType<typeof getApiLocationsId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiLocationsId<TData = Awaited<ReturnType<typeof getApiLocationsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLocationsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiLocationsId>>,
          TError,
          Awaited<ReturnType<typeof getApiLocationsId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiLocationsId<TData = Awaited<ReturnType<typeof getApiLocationsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLocationsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiLocationsId<TData = Awaited<ReturnType<typeof getApiLocationsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiLocationsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiLocationsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
  



export const getApiPerformances = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Performances`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiPerformancesQueryKey = () => {
    return [`/api/Performances`] as const;
    }

    
export const getGetApiPerformancesQueryOptions = <TData = Awaited<ReturnType<typeof getApiPerformances>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformances>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPerformancesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPerformances>>> = ({ signal }) => getApiPerformances(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPerformances>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPerformancesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPerformances>>>
export type GetApiPerformancesQueryError = unknown


export function useGetApiPerformances<TData = Awaited<ReturnType<typeof getApiPerformances>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformances>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPerformances>>,
          TError,
          Awaited<ReturnType<typeof getApiPerformances>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPerformances<TData = Awaited<ReturnType<typeof getApiPerformances>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformances>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPerformances>>,
          TError,
          Awaited<ReturnType<typeof getApiPerformances>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPerformances<TData = Awaited<ReturnType<typeof getApiPerformances>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformances>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiPerformances<TData = Awaited<ReturnType<typeof getApiPerformances>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformances>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPerformancesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiPerformances = (
    createPerformanceDto: CreatePerformanceDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Performances`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPerformanceDto, signal
    },
      );
    }
  


export const getPostApiPerformancesMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPerformances>>, TError,{data: CreatePerformanceDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiPerformances>>, TError,{data: CreatePerformanceDto}, TContext> => {
    
const mutationKey = ['postApiPerformances'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPerformances>>, {data: CreatePerformanceDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiPerformances(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPerformancesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPerformances>>>
    export type PostApiPerformancesMutationBody = CreatePerformanceDto
    export type PostApiPerformancesMutationError = ProblemDetails

    export const usePostApiPerformances = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPerformances>>, TError,{data: CreatePerformanceDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiPerformances>>,
        TError,
        {data: CreatePerformanceDto},
        TContext
      > => {

      const mutationOptions = getPostApiPerformancesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiPerformancesShowShowId = (
    showId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Performances/show/${showId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiPerformancesShowShowIdQueryKey = (showId: number,) => {
    return [`/api/Performances/show/${showId}`] as const;
    }

    
export const getGetApiPerformancesShowShowIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPerformancesShowShowId>>, TError = ProblemDetails>(showId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesShowShowId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPerformancesShowShowIdQueryKey(showId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPerformancesShowShowId>>> = ({ signal }) => getApiPerformancesShowShowId(showId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(showId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesShowShowId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPerformancesShowShowIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPerformancesShowShowId>>>
export type GetApiPerformancesShowShowIdQueryError = ProblemDetails


export function useGetApiPerformancesShowShowId<TData = Awaited<ReturnType<typeof getApiPerformancesShowShowId>>, TError = ProblemDetails>(
 showId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesShowShowId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPerformancesShowShowId>>,
          TError,
          Awaited<ReturnType<typeof getApiPerformancesShowShowId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPerformancesShowShowId<TData = Awaited<ReturnType<typeof getApiPerformancesShowShowId>>, TError = ProblemDetails>(
 showId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesShowShowId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPerformancesShowShowId>>,
          TError,
          Awaited<ReturnType<typeof getApiPerformancesShowShowId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPerformancesShowShowId<TData = Awaited<ReturnType<typeof getApiPerformancesShowShowId>>, TError = ProblemDetails>(
 showId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesShowShowId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiPerformancesShowShowId<TData = Awaited<ReturnType<typeof getApiPerformancesShowShowId>>, TError = ProblemDetails>(
 showId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesShowShowId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPerformancesShowShowIdQueryOptions(showId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiPerformancesId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Performances/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiPerformancesIdQueryKey = (id: number,) => {
    return [`/api/Performances/${id}`] as const;
    }

    
export const getGetApiPerformancesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPerformancesId>>, TError = ProblemDetails>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPerformancesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPerformancesId>>> = ({ signal }) => getApiPerformancesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPerformancesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPerformancesId>>>
export type GetApiPerformancesIdQueryError = ProblemDetails


export function useGetApiPerformancesId<TData = Awaited<ReturnType<typeof getApiPerformancesId>>, TError = ProblemDetails>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPerformancesId>>,
          TError,
          Awaited<ReturnType<typeof getApiPerformancesId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPerformancesId<TData = Awaited<ReturnType<typeof getApiPerformancesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPerformancesId>>,
          TError,
          Awaited<ReturnType<typeof getApiPerformancesId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPerformancesId<TData = Awaited<ReturnType<typeof getApiPerformancesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiPerformancesId<TData = Awaited<ReturnType<typeof getApiPerformancesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPerformancesId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPerformancesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiPerformancesId = (
    id: number,
    updatePerformanceDto: UpdatePerformanceDto,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Performances/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePerformanceDto
    },
      );
    }
  


export const getPutApiPerformancesIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiPerformancesId>>, TError,{id: number;data: UpdatePerformanceDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiPerformancesId>>, TError,{id: number;data: UpdatePerformanceDto}, TContext> => {
    
const mutationKey = ['putApiPerformancesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiPerformancesId>>, {id: number;data: UpdatePerformanceDto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiPerformancesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiPerformancesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPerformancesId>>>
    export type PutApiPerformancesIdMutationBody = UpdatePerformanceDto
    export type PutApiPerformancesIdMutationError = ProblemDetails

    export const usePutApiPerformancesId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiPerformancesId>>, TError,{id: number;data: UpdatePerformanceDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putApiPerformancesId>>,
        TError,
        {id: number;data: UpdatePerformanceDto},
        TContext
      > => {

      const mutationOptions = getPutApiPerformancesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiPerformancesId = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Performances/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiPerformancesIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiPerformancesId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiPerformancesId>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteApiPerformancesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiPerformancesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiPerformancesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiPerformancesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPerformancesId>>>
    
    export type DeleteApiPerformancesIdMutationError = ProblemDetails

    export const useDeleteApiPerformancesId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiPerformancesId>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiPerformancesId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiPerformancesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiPerformancesBatch = (
    batchCreatePerformanceDto: BatchCreatePerformanceDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Performances/batch`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: batchCreatePerformanceDto, signal
    },
      );
    }
  


export const getPostApiPerformancesBatchMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPerformancesBatch>>, TError,{data: BatchCreatePerformanceDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiPerformancesBatch>>, TError,{data: BatchCreatePerformanceDto}, TContext> => {
    
const mutationKey = ['postApiPerformancesBatch'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPerformancesBatch>>, {data: BatchCreatePerformanceDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiPerformancesBatch(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPerformancesBatchMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPerformancesBatch>>>
    export type PostApiPerformancesBatchMutationBody = BatchCreatePerformanceDto
    export type PostApiPerformancesBatchMutationError = ProblemDetails

    export const usePostApiPerformancesBatch = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPerformancesBatch>>, TError,{data: BatchCreatePerformanceDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiPerformancesBatch>>,
        TError,
        {data: BatchCreatePerformanceDto},
        TContext
      > => {

      const mutationOptions = getPostApiPerformancesBatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiShows = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiShowsQueryKey = () => {
    return [`/api/Shows`] as const;
    }

    
export const getGetApiShowsQueryOptions = <TData = Awaited<ReturnType<typeof getApiShows>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiShowsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiShows>>> = ({ signal }) => getApiShows(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiShowsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiShows>>>
export type GetApiShowsQueryError = unknown


export function useGetApiShows<TData = Awaited<ReturnType<typeof getApiShows>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShows>>,
          TError,
          Awaited<ReturnType<typeof getApiShows>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShows<TData = Awaited<ReturnType<typeof getApiShows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShows>>,
          TError,
          Awaited<ReturnType<typeof getApiShows>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShows<TData = Awaited<ReturnType<typeof getApiShows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiShows<TData = Awaited<ReturnType<typeof getApiShows>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShows>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiShowsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiShows = (
    createShowDto: CreateShowDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createShowDto, signal
    },
      );
    }
  


export const getPostApiShowsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiShows>>, TError,{data: CreateShowDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiShows>>, TError,{data: CreateShowDto}, TContext> => {
    
const mutationKey = ['postApiShows'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiShows>>, {data: CreateShowDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiShows(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiShowsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiShows>>>
    export type PostApiShowsMutationBody = CreateShowDto
    export type PostApiShowsMutationError = ProblemDetails

    export const usePostApiShows = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiShows>>, TError,{data: CreateShowDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiShows>>,
        TError,
        {data: CreateShowDto},
        TContext
      > => {

      const mutationOptions = getPostApiShowsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiShowsId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiShowsIdQueryKey = (id: number,) => {
    return [`/api/Shows/${id}`] as const;
    }

    
export const getGetApiShowsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiShowsId>>, TError = ProblemDetails>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiShowsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiShowsId>>> = ({ signal }) => getApiShowsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiShowsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiShowsId>>>
export type GetApiShowsIdQueryError = ProblemDetails


export function useGetApiShowsId<TData = Awaited<ReturnType<typeof getApiShowsId>>, TError = ProblemDetails>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsId>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsId<TData = Awaited<ReturnType<typeof getApiShowsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsId>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsId<TData = Awaited<ReturnType<typeof getApiShowsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiShowsId<TData = Awaited<ReturnType<typeof getApiShowsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiShowsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiShowsId = (
    id: number,
    updateShowDto: UpdateShowDto,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateShowDto
    },
      );
    }
  


export const getPutApiShowsIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiShowsId>>, TError,{id: number;data: UpdateShowDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiShowsId>>, TError,{id: number;data: UpdateShowDto}, TContext> => {
    
const mutationKey = ['putApiShowsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiShowsId>>, {id: number;data: UpdateShowDto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiShowsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiShowsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiShowsId>>>
    export type PutApiShowsIdMutationBody = UpdateShowDto
    export type PutApiShowsIdMutationError = ProblemDetails

    export const usePutApiShowsId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiShowsId>>, TError,{id: number;data: UpdateShowDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putApiShowsId>>,
        TError,
        {id: number;data: UpdateShowDto},
        TContext
      > => {

      const mutationOptions = getPutApiShowsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiShowsId = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiShowsIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiShowsId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiShowsId>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteApiShowsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiShowsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiShowsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiShowsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiShowsId>>>
    
    export type DeleteApiShowsIdMutationError = ProblemDetails

    export const useDeleteApiShowsId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiShowsId>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiShowsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiShowsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiShowsAgeRestrictions = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows/age-restrictions`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiShowsAgeRestrictionsQueryKey = () => {
    return [`/api/Shows/age-restrictions`] as const;
    }

    
export const getGetApiShowsAgeRestrictionsQueryOptions = <TData = Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiShowsAgeRestrictionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>> = ({ signal }) => getApiShowsAgeRestrictions(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiShowsAgeRestrictionsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>>
export type GetApiShowsAgeRestrictionsQueryError = unknown


export function useGetApiShowsAgeRestrictions<TData = Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsAgeRestrictions<TData = Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsAgeRestrictions<TData = Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiShowsAgeRestrictions<TData = Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsAgeRestrictions>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiShowsAgeRestrictionsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiShowsShowTypes = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Shows/show-types`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiShowsShowTypesQueryKey = () => {
    return [`/api/Shows/show-types`] as const;
    }

    
export const getGetApiShowsShowTypesQueryOptions = <TData = Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiShowsShowTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiShowsShowTypes>>> = ({ signal }) => getApiShowsShowTypes(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiShowsShowTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiShowsShowTypes>>>
export type GetApiShowsShowTypesQueryError = unknown


export function useGetApiShowsShowTypes<TData = Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsShowTypes>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsShowTypes>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsShowTypes<TData = Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiShowsShowTypes>>,
          TError,
          Awaited<ReturnType<typeof getApiShowsShowTypes>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiShowsShowTypes<TData = Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiShowsShowTypes<TData = Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiShowsShowTypes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiShowsShowTypesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getApiTickets = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Tickets`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiTicketsQueryKey = () => {
    return [`/api/Tickets`] as const;
    }

    
export const getGetApiTicketsQueryOptions = <TData = Awaited<ReturnType<typeof getApiTickets>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTickets>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTicketsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTickets>>> = ({ signal }) => getApiTickets(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTickets>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTicketsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTickets>>>
export type GetApiTicketsQueryError = unknown


export function useGetApiTickets<TData = Awaited<ReturnType<typeof getApiTickets>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTickets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTickets>>,
          TError,
          Awaited<ReturnType<typeof getApiTickets>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTickets<TData = Awaited<ReturnType<typeof getApiTickets>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTickets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTickets>>,
          TError,
          Awaited<ReturnType<typeof getApiTickets>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTickets<TData = Awaited<ReturnType<typeof getApiTickets>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTickets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiTickets<TData = Awaited<ReturnType<typeof getApiTickets>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTickets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTicketsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiTickets = (
    createTicketDTO: CreateTicketDTO,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Tickets`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTicketDTO, signal
    },
      );
    }
  


export const getPostApiTicketsMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTickets>>, TError,{data: CreateTicketDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiTickets>>, TError,{data: CreateTicketDTO}, TContext> => {
    
const mutationKey = ['postApiTickets'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTickets>>, {data: CreateTicketDTO}> = (props) => {
          const {data} = props ?? {};

          return  postApiTickets(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTicketsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTickets>>>
    export type PostApiTicketsMutationBody = CreateTicketDTO
    export type PostApiTicketsMutationError = ProblemDetails

    export const usePostApiTickets = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTickets>>, TError,{data: CreateTicketDTO}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiTickets>>,
        TError,
        {data: CreateTicketDTO},
        TContext
      > => {

      const mutationOptions = getPostApiTicketsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiTicketsId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Tickets/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiTicketsIdQueryKey = (id: number,) => {
    return [`/api/Tickets/${id}`] as const;
    }

    
export const getGetApiTicketsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiTicketsId>>, TError = ProblemDetails>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTicketsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTicketsId>>> = ({ signal }) => getApiTicketsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTicketsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTicketsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTicketsId>>>
export type GetApiTicketsIdQueryError = ProblemDetails


export function useGetApiTicketsId<TData = Awaited<ReturnType<typeof getApiTicketsId>>, TError = ProblemDetails>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTicketsId>>,
          TError,
          Awaited<ReturnType<typeof getApiTicketsId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTicketsId<TData = Awaited<ReturnType<typeof getApiTicketsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTicketsId>>,
          TError,
          Awaited<ReturnType<typeof getApiTicketsId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTicketsId<TData = Awaited<ReturnType<typeof getApiTicketsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiTicketsId<TData = Awaited<ReturnType<typeof getApiTicketsId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTicketsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiTicketsId = (
    id: number,
    updateTicketDto: UpdateTicketDto,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Tickets/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateTicketDto
    },
      );
    }
  


export const getPutApiTicketsIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTicketsId>>, TError,{id: number;data: UpdateTicketDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiTicketsId>>, TError,{id: number;data: UpdateTicketDto}, TContext> => {
    
const mutationKey = ['putApiTicketsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiTicketsId>>, {id: number;data: UpdateTicketDto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiTicketsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiTicketsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiTicketsId>>>
    export type PutApiTicketsIdMutationBody = UpdateTicketDto
    export type PutApiTicketsIdMutationError = ProblemDetails

    export const usePutApiTicketsId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTicketsId>>, TError,{id: number;data: UpdateTicketDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putApiTicketsId>>,
        TError,
        {id: number;data: UpdateTicketDto},
        TContext
      > => {

      const mutationOptions = getPutApiTicketsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiTicketsId = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Tickets/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiTicketsIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTicketsId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTicketsId>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteApiTicketsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTicketsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiTicketsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTicketsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTicketsId>>>
    
    export type DeleteApiTicketsIdMutationError = ProblemDetails

    export const useDeleteApiTicketsId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTicketsId>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTicketsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiTicketsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiTicketTypes = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/TicketTypes`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiTicketTypesQueryKey = () => {
    return [`/api/TicketTypes`] as const;
    }

    
export const getGetApiTicketTypesQueryOptions = <TData = Awaited<ReturnType<typeof getApiTicketTypes>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTicketTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTicketTypes>>> = ({ signal }) => getApiTicketTypes(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTicketTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTicketTypes>>>
export type GetApiTicketTypesQueryError = unknown


export function useGetApiTicketTypes<TData = Awaited<ReturnType<typeof getApiTicketTypes>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTicketTypes>>,
          TError,
          Awaited<ReturnType<typeof getApiTicketTypes>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTicketTypes<TData = Awaited<ReturnType<typeof getApiTicketTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTicketTypes>>,
          TError,
          Awaited<ReturnType<typeof getApiTicketTypes>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTicketTypes<TData = Awaited<ReturnType<typeof getApiTicketTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiTicketTypes<TData = Awaited<ReturnType<typeof getApiTicketTypes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTicketTypesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiTicketTypes = (
    createTicketTypeDto: CreateTicketTypeDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/TicketTypes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTicketTypeDto, signal
    },
      );
    }
  


export const getPostApiTicketTypesMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTicketTypes>>, TError,{data: CreateTicketTypeDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiTicketTypes>>, TError,{data: CreateTicketTypeDto}, TContext> => {
    
const mutationKey = ['postApiTicketTypes'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTicketTypes>>, {data: CreateTicketTypeDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiTicketTypes(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTicketTypesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTicketTypes>>>
    export type PostApiTicketTypesMutationBody = CreateTicketTypeDto
    export type PostApiTicketTypesMutationError = ProblemDetails

    export const usePostApiTicketTypes = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTicketTypes>>, TError,{data: CreateTicketTypeDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiTicketTypes>>,
        TError,
        {data: CreateTicketTypeDto},
        TContext
      > => {

      const mutationOptions = getPostApiTicketTypesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiTicketTypesId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/TicketTypes/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiTicketTypesIdQueryKey = (id: number,) => {
    return [`/api/TicketTypes/${id}`] as const;
    }

    
export const getGetApiTicketTypesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiTicketTypesId>>, TError = ProblemDetails>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTicketTypesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTicketTypesId>>> = ({ signal }) => getApiTicketTypesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTicketTypesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTicketTypesId>>>
export type GetApiTicketTypesIdQueryError = ProblemDetails


export function useGetApiTicketTypesId<TData = Awaited<ReturnType<typeof getApiTicketTypesId>>, TError = ProblemDetails>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTicketTypesId>>,
          TError,
          Awaited<ReturnType<typeof getApiTicketTypesId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTicketTypesId<TData = Awaited<ReturnType<typeof getApiTicketTypesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTicketTypesId>>,
          TError,
          Awaited<ReturnType<typeof getApiTicketTypesId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTicketTypesId<TData = Awaited<ReturnType<typeof getApiTicketTypesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypesId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiTicketTypesId<TData = Awaited<ReturnType<typeof getApiTicketTypesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTicketTypesId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTicketTypesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiTicketTypesId = (
    id: number,
    updateTicketTypeDto: UpdateTicketTypeDto,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/TicketTypes/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateTicketTypeDto
    },
      );
    }
  


export const getPutApiTicketTypesIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTicketTypesId>>, TError,{id: number;data: UpdateTicketTypeDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiTicketTypesId>>, TError,{id: number;data: UpdateTicketTypeDto}, TContext> => {
    
const mutationKey = ['putApiTicketTypesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiTicketTypesId>>, {id: number;data: UpdateTicketTypeDto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiTicketTypesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiTicketTypesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiTicketTypesId>>>
    export type PutApiTicketTypesIdMutationBody = UpdateTicketTypeDto
    export type PutApiTicketTypesIdMutationError = ProblemDetails

    export const usePutApiTicketTypesId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTicketTypesId>>, TError,{id: number;data: UpdateTicketTypeDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putApiTicketTypesId>>,
        TError,
        {id: number;data: UpdateTicketTypeDto},
        TContext
      > => {

      const mutationOptions = getPutApiTicketTypesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiTicketTypesId = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/TicketTypes/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiTicketTypesIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTicketTypesId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTicketTypesId>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteApiTicketTypesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTicketTypesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiTicketTypesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTicketTypesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTicketTypesId>>>
    
    export type DeleteApiTicketTypesIdMutationError = ProblemDetails

    export const useDeleteApiTicketTypesId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTicketTypesId>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTicketTypesId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiTicketTypesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiUserQuery = (
    userQueryDto: UserQueryDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/UserQuery`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userQueryDto, signal
    },
      );
    }
  


export const getPostApiUserQueryMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserQuery>>, TError,{data: UserQueryDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiUserQuery>>, TError,{data: UserQueryDto}, TContext> => {
    
const mutationKey = ['postApiUserQuery'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUserQuery>>, {data: UserQueryDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiUserQuery(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUserQueryMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUserQuery>>>
    export type PostApiUserQueryMutationBody = UserQueryDto
    export type PostApiUserQueryMutationError = ProblemDetails

    export const usePostApiUserQuery = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserQuery>>, TError,{data: UserQueryDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiUserQuery>>,
        TError,
        {data: UserQueryDto},
        TContext
      > => {

      const mutationOptions = getPostApiUserQueryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiVenues = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Venues`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiVenuesQueryKey = () => {
    return [`/api/Venues`] as const;
    }

    
export const getGetApiVenuesQueryOptions = <TData = Awaited<ReturnType<typeof getApiVenues>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiVenuesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiVenues>>> = ({ signal }) => getApiVenues(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiVenuesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiVenues>>>
export type GetApiVenuesQueryError = unknown


export function useGetApiVenues<TData = Awaited<ReturnType<typeof getApiVenues>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVenues>>,
          TError,
          Awaited<ReturnType<typeof getApiVenues>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVenues<TData = Awaited<ReturnType<typeof getApiVenues>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVenues>>,
          TError,
          Awaited<ReturnType<typeof getApiVenues>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVenues<TData = Awaited<ReturnType<typeof getApiVenues>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiVenues<TData = Awaited<ReturnType<typeof getApiVenues>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenues>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiVenuesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiVenues = (
    createVenueDto: CreateVenueDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Venues`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createVenueDto, signal
    },
      );
    }
  


export const getPostApiVenuesMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiVenues>>, TError,{data: CreateVenueDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiVenues>>, TError,{data: CreateVenueDto}, TContext> => {
    
const mutationKey = ['postApiVenues'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiVenues>>, {data: CreateVenueDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiVenues(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiVenuesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiVenues>>>
    export type PostApiVenuesMutationBody = CreateVenueDto
    export type PostApiVenuesMutationError = ProblemDetails

    export const usePostApiVenues = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiVenues>>, TError,{data: CreateVenueDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiVenues>>,
        TError,
        {data: CreateVenueDto},
        TContext
      > => {

      const mutationOptions = getPostApiVenuesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiVenuesId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Venues/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiVenuesIdQueryKey = (id: number,) => {
    return [`/api/Venues/${id}`] as const;
    }

    
export const getGetApiVenuesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiVenuesId>>, TError = ProblemDetails>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiVenuesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiVenuesId>>> = ({ signal }) => getApiVenuesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiVenuesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiVenuesId>>>
export type GetApiVenuesIdQueryError = ProblemDetails


export function useGetApiVenuesId<TData = Awaited<ReturnType<typeof getApiVenuesId>>, TError = ProblemDetails>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVenuesId>>,
          TError,
          Awaited<ReturnType<typeof getApiVenuesId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVenuesId<TData = Awaited<ReturnType<typeof getApiVenuesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVenuesId>>,
          TError,
          Awaited<ReturnType<typeof getApiVenuesId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVenuesId<TData = Awaited<ReturnType<typeof getApiVenuesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiVenuesId<TData = Awaited<ReturnType<typeof getApiVenuesId>>, TError = ProblemDetails>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiVenuesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiVenuesId = (
    id: number,
    createVenueDto: CreateVenueDto,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Venues/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createVenueDto
    },
      );
    }
  


export const getPutApiVenuesIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiVenuesId>>, TError,{id: number;data: CreateVenueDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiVenuesId>>, TError,{id: number;data: CreateVenueDto}, TContext> => {
    
const mutationKey = ['putApiVenuesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiVenuesId>>, {id: number;data: CreateVenueDto}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiVenuesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiVenuesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiVenuesId>>>
    export type PutApiVenuesIdMutationBody = CreateVenueDto
    export type PutApiVenuesIdMutationError = ProblemDetails

    export const usePutApiVenuesId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiVenuesId>>, TError,{id: number;data: CreateVenueDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putApiVenuesId>>,
        TError,
        {id: number;data: CreateVenueDto},
        TContext
      > => {

      const mutationOptions = getPutApiVenuesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiVenuesId = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/Venues/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiVenuesIdMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiVenuesId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiVenuesId>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['deleteApiVenuesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiVenuesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiVenuesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiVenuesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiVenuesId>>>
    
    export type DeleteApiVenuesIdMutationError = ProblemDetails

    export const useDeleteApiVenuesId = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiVenuesId>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiVenuesId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiVenuesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiVenuesVenueTypes = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/Venues/venue-types`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiVenuesVenueTypesQueryKey = () => {
    return [`/api/Venues/venue-types`] as const;
    }

    
export const getGetApiVenuesVenueTypesQueryOptions = <TData = Awaited<ReturnType<typeof getApiVenuesVenueTypes>>, TError = ProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesVenueTypes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiVenuesVenueTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiVenuesVenueTypes>>> = ({ signal }) => getApiVenuesVenueTypes(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesVenueTypes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiVenuesVenueTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiVenuesVenueTypes>>>
export type GetApiVenuesVenueTypesQueryError = ProblemDetails


export function useGetApiVenuesVenueTypes<TData = Awaited<ReturnType<typeof getApiVenuesVenueTypes>>, TError = ProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesVenueTypes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVenuesVenueTypes>>,
          TError,
          Awaited<ReturnType<typeof getApiVenuesVenueTypes>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVenuesVenueTypes<TData = Awaited<ReturnType<typeof getApiVenuesVenueTypes>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesVenueTypes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVenuesVenueTypes>>,
          TError,
          Awaited<ReturnType<typeof getApiVenuesVenueTypes>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVenuesVenueTypes<TData = Awaited<ReturnType<typeof getApiVenuesVenueTypes>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesVenueTypes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiVenuesVenueTypes<TData = Awaited<ReturnType<typeof getApiVenuesVenueTypes>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVenuesVenueTypes>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiVenuesVenueTypesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




